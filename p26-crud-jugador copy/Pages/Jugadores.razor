@page "/jugadores"
@inject JugadorServicio jugadorServicio
@inject IJSRuntime jsRuntime

<h3>Jugadores</h3>

<NavLink class="nav-link" href="jugador/agregar">
<span class="oi oi-plus" aria-hidden="true">Agregar Jugador</span>
</NavLink>

<div class="row">
    <div class="col-md-6">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>FechaNac</th>
                    <th>NoPlayera</th>
                    <th>Posicion</th>
                    <th>Apariciones</th>
                    <th>Goles</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var jugador in jugadores)
            {
            <tr>
                <td>@jugador.Nombre</td>
                <td>@jugador.FechaNac</td>
                <td>@jugador.NoPlayera</td>
                <td>@jugador.Posicion</td>
                <td>@jugador.Apariciones</td>
                <td>@jugador.Goles</td>
                <tr>
                    <a href="jugador/editar/@jugador.Id" class="btn btn-success">Editar</a>
                    <a class="btn btn-danger" @onclick="async ()=> await Borrar(jugador)">Borrar</a>
                </tr>
            </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Jugador> jugadores = new();
    protected override void OnInitialized()
    {
        jugadores = jugadorServicio.ObtenerTodo();
    }
    private async Task Borrar(Jugador jugador) {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Estas seguro????");
        if (confirmed)
          if(jugadorServicio.Borrar(jugador.Id))
            jugadores.Remove(jugador);
    }
}
